#! /usr/bin/python
# -*- coding: utf-8 -*-
import os
import sys
from time import sleep
from PyQt5.QtCore import QStringListModel , pyqtSlot , QDir , QAbstractListModel , Qt , QModelIndex,QObject,QItemSelectionModel
from PyQt5.uic import loadUiType,loadUi
from PyQt5.QtWidgets import QWidget,QApplication,QHBoxLayout,QDialog,QListView,QListWidget,QTableWidget,QTableView,QFileDialog,QTableWidgetItem,QWidget,QTreeView,QMainWindow,QPushButton 
from PyQt5.QtGui import  QStandardItemModel , QStandardItem

from lekture import lekture

debug = True
lekture.debug = True
lekture.events.debug = True

def debugUI(whatitis , WHAT2PRINT = ''):
    if debug : print "TRIGGERED FROM UI : " + whatitis , WHAT2PRINT

# LOAD THE UI FILE GENERATED BY QT CREATOR / DESIGNER
form_class, base_class = loadUiType('lekture.ui')

model_obj = {}

class Project_Window(QMainWindow, form_class):
    """create lekture view and controller (MVC)"""
    def __init__(self):
        super(Project_Window, self).__init__()
        self.setupUi(self)
        # load a style sheet
        self.setStyleSheet(open("style.qss", "r").read())
        # make a model for lekture Project
        self.project_model = QStandardItemModel()
        # create a new project
        self.project = lekture.Project('no name')


    """ PROJECT FILE MANAGEMENT """

    def new_project(self):
        """method used for ProjectNew and ProjectOpen"""
        self.lekture_model.clear()
        debugUI("NEW PROJECT")
        self.__init__()
        

    def save_as_project(self,path):
        debugUI("SAVE PROJECT AS")
        self.project.path = path+'.json'
        self.project.write()

    def open_project(self,path):
        if path:
            if debug : print 'file_path has been selected' , path
            self.project.path = path
            self.project.read()
            debugUI("OPEN PROJECT",path)
        else:
            debugUI('no file selected')


    @pyqtSlot()
    def on_ProjectNew_triggered(self):
        """Create a new project (reload everything)"""
        self.new_project()

    @pyqtSlot()
    def on_ProjectOpen_triggered(self):
        """open a project (reload everything)"""
        self.new_project()
        path = QFileDialog().getOpenFileName(self, "Select a lekture project to open",)
        path = path[0]
        self.open_project(path)

    @pyqtSlot()
    def on_ProjectSave_triggered(self):
        """ save project"""
        debugUI('SAVE PROJECT')
        if os.path.exists(self.project.path):
            self.project.write()
        else:
            self.save_as_project()

    @pyqtSlot()
    def on_ProjectSaveAs_triggered(self):
        """save project as"""
        path = QFileDialog.getSaveFileName(self, "Save lekture project")
        if debug : print "SAVE AS" , path
        if path:
            path = path[0]
        self.save_as_project(path)
    
    @pyqtSlot()
    def on_ProjectOpenDir_triggered(self):
        """ open project directory"""
        directory, filename = os.path.split(self.project.path)
        from subprocess import call
        call(["open", directory])
        debugUI("OPEN DIRECTORY",[directory,filename])




if __name__ == "__main__":
    app = QApplication(sys.argv)
    appWindow = Project_Window()
    appWindow.move(5,12)
    appWindow.show()
    sys.exit(app.exec_())
    sdRef.close()
